What happens when you initialize a repository? Why do you need to do it?
    
     when you initialize a repository, you enable git in that directory. You
need to perform this so Git creates a .git hidden folder to version control
any files modified and user commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

     Staging are is different from working directory as in the staging area
acts like a local versioning of files before commits are performed back to the
repository.
     The value the staging area offers is performing a finial check & review before commiting updates to the master repository.

How can you use the staging area to make sure you have one commit per logical
change?

     Using the staging area to double check your commit by running git diff --staged. This compares what changes are being made to the repositoy on your next git commit.
     
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

     Branches are helpful when developing new features to test. New branchs are helpful when UAT is completed and moving onto something new. 

How do the diagrams help you visualize the branch structure?

     The diagram helps in understanding branchs and commit histories. Knowing what is accessible and linked when & how checking out code.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

     The result of merging branchs is to commit updates on to a finial version of working files to backup and share.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

     Git's automatic merging
     	*Pros.
     	*Cons.

     Always doing merges manually
     	*Pros.
     	*Cons.




